=acts_as_pageable

This plugin seems {will_paginte}[http://github.com/mislav/will_paginate], and indeed it inspired me,
but this plugin has a considerable difference, it's flexible and a general module for pagination.
It's flexible because you can tell it which find/count you want it use.
It's general because you can paginate array, active_record or any object who respond to 'size' and '[]' methods

==Instalation

===Rails
$ script/plugin install git://github.com/pahagon/acts_as_pageable.git

=Example Usage

==Simple way

===Array
  array = [1,2,3,4,5]
  array.extend ActsAsPageable::Paginator
  page = array.paginate!    #using default parameters: page => 1, item_per_page => 10

===ActiveRecord

  page = Post.paginate!                                 #using default parameters: page => 1, item_per_page => 10
  page = Post.paginate! :page => 2                      #overwriting default parameter 
  page = Post.paginate! :items_per_page => 5
  page = Post.paginate! :page => 3, :items_per_page => 5

You can also paginate associations

  page = @author.blogs.paginate! :page => 3

==A Little Flexible

  paginate_args = {
    :page => 2,
    :items_per_page => 5,
    :find =>  [:all, {:conditions => ["active = ?", true]}], #Same options used at {ActiveRecord}[http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M002208]
    :count => [{:conditions => ["active = ?", true]}]        #Same options used at {ActiveRecord}[http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M002130]
  }
  page = Post.paginate! paginate_args

==The Most Flexible

  paginate_args = {
    :page => 10,
    :find => lambda do |offset,limit,args| 
      Post.find_by_sql(...)
    end,
    :count => lambda do |args| 
      Post.count_by_sql(...)
    end
  }
  page = Post.paginate! paginate_args

== Named Queries

  class Post < ActiveRecord::Base

    belongs_to :author
    belongs_to :blog

    self.paging_named_queries = {
      :only_active => {
        :items_per_page => 3,
        :find =>  [:all, {:conditions => ["active = ?", true]}],
        :count => [{:conditions => ["active = ?", true]}]
      },
      :by_active => {
        :find => lambda do |offset,limit,args| 
          all(:conditions => ["active = ?",args[:active]],:offset => offset, :limit => limit)
        end,
        :count => lambda do |args| 
          count(:conditions => ["active = ?",args[:active]])
        end
      }
    }

  end
  
  page = Post.paginate_only_active(:page => 1)
  page = Post.paginate_by_active(:active => true)

==Parameters

* :page - An integer determining the page number
* :items_per_page - An integer determining the amount of items per page
* :window_offset - An integer determining the page number
* :max_items_per_page - An integer determining the maximum amount of items per page. It's useful when it receve items_per_page parameter from request
* :min_items_per_page - An integer determining the minimum of items per page.  
* :max_window_offset - An integer determining the maximum of items in window.  
* :min_window_offset - An integer determining the minimum of items in window.  

Just for ActiveRecord

* :find - With two different retrieval approaches:
  * Proc  - With offset, limit and args. 
  * Array - Same options used at {ActiveRecord}[http://api.rubyonrails.org/classes/ActiveRecord/Base.html#M002208]
* :count - Like :find parameter :count has similar retrieval approaches:
  * Proc  - With args. 
  * Array - Same options used at {ActiveRecord}[http://api.rubyonrails.org/classes/ActiveRecord/Calculations/ClassMethods.html#M002130]

==After retrieved page

  page.number             # 10
  page.next               # 11
  page.previous           # 9
  page.left_neighbors     # [5 ,6 ,7 ,8 , 9]
  page.right_neighbors    # [10,11,12,13,14]
  page.total_items        # 100
  page.total_pages        # 20
  page.items_per_page     # 5
  page.window_offset      # 5
  page.max_items_per_page # 20
  page.min_items_per_page # 1
  page.min_window_offset  # 2
  page.max_window_offset  # 8
  page.items              # array of objects


===Copyright (c) 2009 Paulo Ahagon. See LICENSE for details.

